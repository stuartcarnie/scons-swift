#!/usr/bin/env python
from utils.scons_hints import *

# Import the environment from parent
Import('env')

# Clone the environment to avoid modifying the global one
env = env.Clone()

# Enable C++ interoperability
env['SWIFT_EMIT_CXX_HEADER'] = True
env['SWIFT_CXX_HEADER_NAME'] = 'SwiftLibrary-Swift.h'

# Configure C++ standard and optimizations
env.Append(CXXFLAGS=['-std=c++17', '-O3', '-DNDEBUG', '-march=native'])
env.Append(LINKFLAGS=['-O3'])

# Add both the source directory and build directory to include paths
# The header might be generated in either location depending on SCons version
env.Append(CPPPATH=['.', '#build/cpp_calls_swift'])

# Configure Swift optimizations
env.Append(SWIFTFLAGS=['-O', '-whole-module-optimization'])

# Build the Swift library first (this generates the C++ header)
swift_lib = env.Object('swift_library.swift')

# The C++ files depend on the Swift library being built first (to generate the header)
# Build the C++ main that uses Swift
cpp_main = env.Object('main.cpp')
env.Depends(cpp_main, swift_lib)

# Build benchmark
cpp_benchmark = env.Object('benchmark.cpp')
env.Depends(cpp_benchmark, swift_lib)

# Link everything together
program = env.Program('cpp_calls_swift', [cpp_main, swift_lib])
benchmark_program = env.Program('benchmark', [cpp_benchmark, swift_lib])

# Return the built targets
Return('program', 'benchmark_program')
